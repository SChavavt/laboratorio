import streamlit as st
import pandas as pd
from datetime import datetime
import gspread
import json
from google.oauth2.service_account import Credentials

# ==============================
# üîß CONFIGURACI√ìN
# ==============================
SCOPE = [
    "https://www.googleapis.com/auth/spreadsheets",
    "https://www.googleapis.com/auth/drive",
]

COLUMNS = [
    "No_orden",
    "Nombre_paciente",
    "Nombre_doctor",
    "Status",
    "Status_NEMO",
    "Tipo_alineador",
    "Fecha_recepcion",
    "Dias_entrega",
    "Comentarios",
    "Notas",
    "Ultima_Modificacion",
]

STATUS_OPTIONS = [
    "1. Revisi√≥n de scan",
    "2. Por hacer Setup",
    "2.1 Scan con falla",
    "3. RETENEDOR",
    "3.1 RETENEDOR en proceso",
    "3.2 SUD en proceso",
    "3.3 SUD proceso modificaci√≥n",
    "4. Para revisi√≥n de SUD 1",
    "4.1 Para revisi√≥n de SUD 2",
    "5. Revisado ‚Äì hay que modificar",
    "5.1 Revisi√≥n alineaci√≥n y nivelaci√≥n",
    "5.2 Revisi√≥n attachments y secuencia",
    "5.3 Revisado VOBO y cotizar",
    "6. Para cotizaci√≥n",
    "7. Cotizaci√≥n lista",
    "7.1 Listo para env√≠o al Dr.",
    "8. Enviado al Dr.",
    "9. Solicitud cambios Dr.",
    "10. Exportar modelos e imprimir",
    "11. Imprimir modelo",
    "12.1 Enviar biomodelos",
    "12.3 Biomodelos enviados",
    "13. Solo alineador",
    "13.1 Para impresi√≥n",
    "13.2 Reimpresi√≥n sin costo",
    "14. Enviado a impresi√≥n",
    "14.1 En impresi√≥n",
    "15. Impresi√≥n perfecta",
    "16. Error de impresi√≥n",
    "17. En calidad",
    "Revisados",
    "Falta Pago",
    "Esperando respuesta del Dr.",
    "REFINAMIENTO",
    "16. Enviado / empaquetado",
]

STATUS_NEMO_OPTIONS = [
    "Nuevo",
    "Carpeta espec√≠fica",
    "Duplicado",
    "Seguimiento",
    "Solo impresi√≥n",
]

# ==============================
# üîê CLIENTE GOOGLE SHEETS
# ==============================
def _get_gs_client():
    creds_str = st.secrets["gsheets"]["google_credentials"]  # üëà viene como string
    creds_info = json.loads(creds_str)  # üëà lo convertimos en dict
    credentials = Credentials.from_service_account_info(creds_info, scopes=SCOPE)
    return gspread.authorize(credentials)
    
@st.cache_resource
def get_worksheet():
    client = _get_gs_client()
    sheet_id = st.secrets["gsheets"]["sheet_id"]
    ws_name = "Procesos_Graphy"

    ss = client.open_by_key(sheet_id)
    try:
        ws = ss.worksheet(ws_name)
    except gspread.WorksheetNotFound:
        ws = ss.add_worksheet(title=ws_name, rows="1000", cols=str(len(COLUMNS)))
        ws.update([COLUMNS])
    return ws

@st.cache_data(ttl=30)
def fetch_df():
    ws = get_worksheet()
    values = ws.get_all_values()
    if not values:
        return pd.DataFrame(columns=COLUMNS)
    df = pd.DataFrame(values[1:], columns=values[0])
    for c in COLUMNS:
        if c not in df.columns:
            df[c] = ""
    return df[COLUMNS]

def append_row(row):
    ws = get_worksheet()
    values = [str(row.get(c, "")) for c in COLUMNS]
    ws.append_row(values, value_input_option="USER_ENTERED")

# ==============================
# üöÄ APP STREAMLIT
# ==============================
st.set_page_config(page_title="Procesos ‚Äì ARTTDLAB", layout="wide")
st.title("üß™ Plataforma de Procesos ‚Äì ARTTDLAB")

tab1, tab2 = st.tabs(["‚ûï Nuevo Proceso", "üìã Consulta"])

# ‚ûï NUEVO PROCESO
with tab1:
    st.subheader("Registrar nuevo proceso")

    with st.form("form_nuevo"):
        in_orden = st.text_input("No. orden *")
        in_paciente = st.text_input("Nombre del paciente *")
        in_doctor = st.text_input("Nombre del doctor *")
        in_status = st.selectbox("Status *", STATUS_OPTIONS)
        in_status_nemo = st.selectbox("Status en NEMO *", STATUS_NEMO_OPTIONS)
        in_tipo_alineador = st.selectbox("Tipo de alineador *", ["Graphy", "Convencional"])
        in_fecha_recepcion = st.date_input("Fecha de recepci√≥n *", datetime.today())
        in_dias_entrega = st.number_input(
            "D√≠as de entrega *", min_value=1, value=1, step=1
        )
        in_comentarios = st.text_area("Comentarios")
        in_notas = st.text_area("Notas")
        enviado = st.form_submit_button("üíæ Guardar")

    if (
        enviado
        and in_orden
        and in_paciente
        and in_doctor
        and in_status
        and in_status_nemo
        and in_tipo_alineador
        and in_fecha_recepcion
        and in_dias_entrega
    ):
        row = {
            "No_orden": in_orden,
            "Nombre_paciente": in_paciente,
            "Nombre_doctor": in_doctor,
            "Status": in_status,
            "Status_NEMO": in_status_nemo,
            "Tipo_alineador": in_tipo_alineador,
            "Fecha_recepcion": in_fecha_recepcion.isoformat(),
            "Dias_entrega": int(in_dias_entrega),
            "Comentarios": in_comentarios,
            "Notas": in_notas,
            "Ultima_Modificacion": datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
        }
        append_row(row)
        st.success("‚úÖ Proceso registrado correctamente.")
        st.cache_data.clear()
    elif enviado:
        st.error("‚ùå Por favor completa los campos obligatorios (*).")

# üìã CONSULTA
with tab2:
    st.subheader("Listado de procesos")
    df = fetch_df()
    if not df.empty:
        st.dataframe(df, use_container_width=True, height=600)
    else:
        st.info("No hay procesos registrados a√∫n.")
